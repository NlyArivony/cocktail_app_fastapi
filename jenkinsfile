pipeline {
    agent any
    environment {
        registryCredential = 'ecr:us-east-1:awscreds'
        appRegistry = "640262203741.dkr.ecr.us-east-1.amazonaws.com/fastapi_cocktail_app_image"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/cicd']], userRemoteConfigs: [[url: 'https://github.com/NlyArivony/cocktail_app_fastapi.git']]])
            }
        }

        stage('Create Virtual Environment and Run App') {
            steps {
                script {
                    // Create a virtual environment in the fetched source code directory
                    sh 'python3 -m venv venv'

                    // Activate the virtual environment and install requirements
                    sh './venv/bin/python3 -m pip install -r requirements.txt'

                    // Run your FastAPI app using run.py
                    sh './venv/bin/python3 run.py &'

                    // Wait for the app to start (you can adjust the sleep duration)
                    sleep time: 30, unit: 'SECONDS'
                }
            }
        }

        stage('Run Tests (Virtual Environment)') {
            steps {
                script {
                    // Run pytest inside the same virtual environment
                    sh './venv/bin/python3 -m pytest'
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                script {
                    // Run Flake8 to check code quality on app
                    sh './venv/bin/flake8 ./app/'

                    // Optionally, you can stop the FastAPI app
                    sh 'pkill -f "python3 run.py"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with a unique tag
                    def dockerImageTag = "${appRegistry}:${BUILD_NUMBER}"
                    docker.build(dockerImageTag, ".")
                }
            }
        }

        stage('Run Tests in Docker Container') {
            steps {
                script {
                    def dockerContainerName = "my-container-${BUILD_NUMBER}"
                    
                    // Run the Docker container
                    def dockerRunCommand = "docker run -d --name ${dockerContainerName} ${appRegistry}:${BUILD_NUMBER}"
                    sh dockerRunCommand
                    
                    // Wait for the container to start (adjust sleep duration as needed)
                    sleep time: 30, unit: 'SECONDS'
                    
                    // Run pytest inside the Docker container
                    sh "docker exec ${dockerContainerName} pytest"
                    
                    // Stop and remove the Docker container
                    sh "docker stop ${dockerContainerName}"
                    sh "docker rm ${dockerContainerName}"
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    def dockerImageTag = "${appRegistry}:${BUILD_NUMBER}"
                    
                    // Push the Docker image to the registry
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push(dockerImageTag)
                        dockerImage.push('latest')
                    }
                }
            }
        }

    }

    post {
        success {
            // Clean up after a successful pipeline run
            script {
                sh 'rm -rf venv' // Remove the virtual environment
            }
        }
    }
}
